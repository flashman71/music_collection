/* ========================================================
     SQL script to create structure in Postgres
      Requires - must have ability to create new database, user, and schema
                 will connect to the new database as the new user and create objects in the new database
      1. Create new database
      2. Connect to the new database
      3. Create new user
      4. Create new schema
      5. Grant all privileges on new schema to new user
      6. Connect to the new database as the new user
      7. Create database objects -- tables, views, etc
   ======================================================== */

create database musicdb;
\connect musicdb;
create user svc_musicapp with encrypted password 'music';
CREATE SCHEMA MUSIC;

GRANT ALL ON SCHEMA MUSIC TO svc_musicapp;

\connect musicdb svc_musicapp;

/*  Messages table
     This is used to log exceptions and information from the procedures
*/
CREATE TABLE IF NOT EXISTS music.app_messages_$t
(
  id        serial PRIMARY KEY,
  app_name  varchar(100) NOT NULL,
  message   varchar(4000) NOT NULL,
  created   timestamp default current_timestamp
);

/* Create view for messages table */
CREATE OR REPLACE VIEW music.app_messages_v
AS
select am.id,
       am.app_name,
       am.message,
       am.created
from   music.app_messages_$t am;

/* Artists table
    ID is generated by the system
    NAME and MBID --these are extracted from the JSON returned from the last.fm web service
    Remaining columsn are for auditing
*/
CREATE TABLE IF NOT EXISTS music.artists_$t
(
 ID            serial                                    PRIMARY KEY,
 NAME          varchar(100)                              NOT NULL,
 MBID          varchar(100),
 DATE_CREATED  timestamp default current_timestamp       NOT NULL,
 APP_CREATED   varchar(50)                               NOT NULL,
 DATE_UPDATED  timestamp default current_timestamp,
 APP_UPDATED   varchar(50),
 UNIQUE (NAME,MBID)
);

/* Create view for artists table */
CREATE OR REPLACE VIEW music.artists_v
AS
select a.id,
       a.name,
       a.mbid,
       a.date_created,
       a.app_created,
       a.date_updated,
       a.app_updated
from   music.artists_$t a;

/* Albums table
    ID is generated by the system
    ARTIST_ID --this is provided from the ARTISTS table
    ALBUM_NAME --this is extracted from the JSON returned from the last.fm web service
    Remaining columsn are for auditing
*/
CREATE TABLE music.albums_$t
(
 ID            serial                                 PRIMARY KEY,
 ALBUM_NAME    varchar(100)                           NOT NULL,
 ARTIST_ID     integer                                NOT NULL,
 DATE_CREATED  timestamp default current_timestamp    NOT NULL,
 APP_CREATED   varchar(50)                            NOT NULL,
 DATE_UPDATED  timestamp default current_timestamp,
 APP_UPDATED   varchar(50),
 UNIQUE (ALBUM_NAME,ARTIST_ID),
 CONSTRAINT fk_artist
    FOREIGN KEY (ARTIST_ID)
       REFERENCES music.artists_$t(id)
);

/* Create view for albums table */
CREATE OR REPLACE VIEW music.albums_v
AS
select a.id,
       a.album_name,
       a.artist_id,
       a.date_created,
       a.app_created,
       a.date_updated,
       a.app_updated
from   music.albums_$t a;

/* Tracks table
    ID is generated by the system
    ALBUM_ID --this is provided from the ALBUMS table
    TRACK_NAME --this is extracted from the JSON returned from the last.fm web service
    Remaining columsn are for auditing
*/
CREATE TABLE music.tracks_$t
(
 ID            serial                                PRIMARY KEY,
 TRACK_NAME    varchar(150)                          NOT NULL,
 ALBUM_ID      integer                               NOT NULL,
 DATE_CREATED  timestamp default current_timestamp   NOT NULL,
 APP_CREATED   varchar(50)                           NOT NULL,
 DATE_UPDATED  timestamp default current_timestamp   NOT NULL,
 APP_UPDATED   varchar(50),
 UNIQUE (TRACK_NAME,ALBUM_ID),
 CONSTRAINT fk_album
    FOREIGN KEY (ALBUM_ID)
       REFERENCES music.albums_$t(id)
);

/* Create view for tracks table */
CREATE OR REPLACE VIEW music.tracks_v
AS
select t.id,
       t.track_name,
       t.album_id,
       t.date_created,
       t.app_created,
       t.date_updated,
       t.app_updated
from   music.tracks_$t t;

/* Create view for artist/album combinations */
CREATE OR REPLACE VIEW music.album_view
AS
SELECT ma.id AS artist_id,
       ma.name AS artist_name,
       mb.id AS album_id,
       mb.album_name
FROM   music."artists_$t" ma,
       music."albums_$t" mb
WHERE  ma.id = mb.artist_id;

/* Create view for artist/album/track combinations */
CREATE OR REPLACE VIEW music.track_view
AS
SELECT ar.id AS artist_id,
       ar.name AS artist_name,
       al.id AS album_id,
       al.album_name,
       tr.id AS track_id,
       tr.track_name
FROM   music."artists_$t" ar,
       music."albums_$t" al,
       music."tracks_$t" tr
WHERE  ar.id = al.artist_id 
AND    al.id = tr.album_id;
