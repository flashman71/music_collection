import yaml
import os.path
from sys import exit
import sys
import json
import logging
import music_database as mdb
import music_services as ms
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import spotify_services as ss

# **********************************************************************************
#  Main driving script.
#  It uses music_database.py and music_services.py
#  It will read the configuration in db/music_collection.rc to define
#  api keyfile, artist data filename, and directories to use for logging and output.
#   

# Application name, used when inserting to the database
# Really should move this to the config file....
APP_NAME = "PY_SPOTIFY_APP"

# Default LOG_LEVEL, this can be set here or in the config file
L_LOG_LEVEL = 'WARNING'

# Default database variables to empty string
DBTYPE = ""
DBUSERNAME = ""
DBPASSWORD = ""
DBPORT = 5432

def exit_prog(message):
   message = "Can't fucking find-> " + message
   exit(message)

with open(r'db/music_collection.rc') as file:
    opt_list = yaml.full_load(file)

    file_vars = opt_list["FILES"]
    for k in file_vars.split():
        if k.split(":")[0] == "SP_KEYFILE":
           SP_KEYFILE = k.split(":")[1]
           if os.path.exists(SP_KEYFILE):
               print("Exists! Found: ", SP_KEYFILE)
           else:
               exit_prog(KEYFILE)
        if k.split(":")[0] == "ARTIST_FILE":
           ARTIST_FILE = k.split(":")[1]
           if os.path.exists(ARTIST_FILE):
               print("Exists! Found: ", ARTIST_FILE)
           else:
               exit_prog(ARTIST_FILE)

    dir_vars = opt_list["DIRECTORIES"]
    for k in dir_vars.split():
        if k.split(":")[0] == "MC_BASE":
           MC_BASE = k.split(":")[1]
           if os.path.exists(MC_BASE):
               print("Exists! Found: ", MC_BASE)
           else:
               exit_prog(MC_BASE)
        if k.split(":")[0] == "OUTPUT":
           OUTPUT = k.split(":")[1]
           if os.path.exists(OUTPUT):
               print("Exists! Found: ", OUTPUT)
           else:
               exit_prog(OUTPUT)
        if k.split(":")[0] == "LOG":
           LOG = k.split(":")[1]
           if os.path.exists(LOG):
               print("Exists! Found: ", LOG)
           else:
               exit_prog(LOG)
        if k.split(":")[0] == "LOG_LEVEL":
           L_LOG_LEVEL = k.split(":")[1]
           
    db_vars = opt_list["DATABASE"]
    for k in db_vars.split():
        if k.split(":")[0] == "TYPE":
           DBTYPE = k.split(":")[1]
        if k.split(":")[0] == "DBNAME":
           DBNAME = k.split(":")[1]
        if k.split(":")[0] == "USERNAME":
           DBUSERNAME = k.split(":")[1]
        if k.split(":")[0] == "DBPASS":
           DBPASSWORD = k.split(":")[1]
        if k.split(":")[0] == "DBHOST":
           DBHOST = k.split(":")[1]
        if k.split(":")[0] == "DBPORT":
           DBPORT = k.split(":")[1]
           
#Prepare logging
logger = logging.getLogger(APP_NAME)
logfilename = LOG + "/" + APP_NAME + ".log"
log_handler = logging.FileHandler(logfilename)
log_formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
log_handler.setFormatter(log_formatter)
logger.addHandler(log_handler)
log_level = logging.getLevelName(L_LOG_LEVEL)
logger.setLevel(log_level)

# Variable to determine if processing should continue, default to False
fcont = False

# File to hold artists that cannot be found
outfile = OUTPUT + "/" + APP_NAME + "_exceptions.txt"
exc_file = open(outfile,"w")

# This block attempts to open the key file and read the key.
# It will read the first line ONLY in the file.  As long as the length of the
# input string is > 0 it will continue
try:
    fkey = open(SP_KEYFILE,"r")
    for line in fkey:
        line = line.strip()
        if line:
            key,value = line.split(':',1)
            if key == "CLIENT_ID":
                SPOTIFY_CLIENT_ID = value.strip()
            if key == "CLIENT_SECRET":
                SPOTIFY_CLIENT_SECRET = value.strip()

    if len(SP_CLIENT_ID) > 0 and len(SP_CLIENT_SECRET) > 0:
        fcont = True
    else:
        logger.error('No data found')
    fkey.close()
except IOError:
    logger.error('Unable to open file or file not found')
except:
    logger.error('Other grisly problem opening/reading file')

# Artist ID --default to -1 to indicate an invalid artist id
artist_id = -1

# open the artists file and loop through the data
# Call the service for each artist to get the mbid
fin = open(ARTIST_FILE,"r")
f_readlines = fin.readlines()
 
if DBTYPE != "":
   # Open the database connection
   conn = mdb.connectDb(DBTYPE,DBHOST,DBNAME,DBUSERNAME,DBPASSWORD,DBPORT)
else:
   logger.warn('No database defined in configuration file')

# Variable used to log location of program if an error is encountered
statement_id = '0'

# Loop through the records in the artist list

# Initialize the Spotipy client
sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=SPOTIFY_CLIENT_ID, client_secret=SPOTIFY_CLIENT_SECRET))

artist_id = ""

if __name__ == "__main__":
    # Prompt user to input the artist's name
    artists = mdb.get_artists_l(DBTYPE,conn)
    for artist_name in artists:
       srch_artist = f'{artist_name[0]}'
       srch_album  = f'{artist_name[1]}'
       album_id    = f'{artist_name[2]}'
       artist = ss.search_artist(sp,srch_artist)
       if artist:
           artist_id = artist['id']
           genres = artist['genres']
           genres.sort()
           genres = str(genres).replace("[","{").replace("]","}").replace("'","\"")
           upd_stmt = "update mus_owner.album set spotify_genres = '" + str(genres) + "' where id = " + album_id + ";"
           print(upd_stmt)
           album_info = ss.get_album(sp,artist_id,srch_album)
       else:
           print("Artist not found.")

mdb.closeDb(conn)
